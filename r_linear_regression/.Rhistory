x <- seq(0, 50, by = 1)
y <- dbinom(x, 50, 0.5)
plot(x,y)
# importing dataset
data(SaratogaHouses, package = "mosaicData")
View(SaratogaHouses)
# selecting numeric variables
df <- dplyr::select_if(SaratogaHouses, is.numeric)
# calculating the correlations
r <- cor(df, use="complete.obs")
round(r, 2)
library(ggplot2)
library(ggcorrplot)
# dark red - strong positive correlations
# dark blue - strong negative correlations
# white - no correlations
ggcorrplot(r)
ggcorrplot(r,
hc.order = TRUE,
type = "lower",
lab = TRUE)
setwd("E:/Sem_8/sd_lab/r/r_assignment_4_linear_regression")
setwd("E:/Sem_8/sd_lab/r/r_assignment_4_linear_regression")
# Loading ggplot
library(ggplot2)
# Importing dataset
trainingSet = read.csv('train.csv')
View(trainingSet)
# Checking for NA and missing values
numberofNA = length(which(is.na(trainingSet) == T))
if(numberofNA > 0) {
cat('Number of missing values found: ', numberofNA)
cat('\nRemoving missing values...')
trainingSet = trainingSet[complete.cases(trainingSet), ]
}
# Dividing graph area into two columns
par(mfrow = c(1,2))
# BOxplot for x
boxplot(trainingSet$x, main='X', sub=paste('Outliers: ',
boxplot.stats(trainingSet$x)$out))
# BOxplot for y
boxplot(trainingSet$y, main='Y', sub=paste('Outliers: ',
boxplot.stats(trainingSet$y)$out))
# Finding correlation
cor(trainingSet$x, trainingSet$y)
regressor = lm(formula = y ~.,
data = trainingSet)
summary(regressor)
ggplot() +
geom_point(aes(x = trainingSet$x, y = trainingSet$y),
colour = 'red') +
geom_line(aes(x = trainingSet$x,
y = predict(regressor, newdata = trainingSet))) +
ggtitle('X vs Y (Training set)') +
xlab('X') +
ylab('Y')
# Importing test data
testSet = read.csv('test.csv')
testSet = read.csv('test.csv')
View(testSet)
y_pred = predict(regressor, newdata = testSet)
ggplot() +
geom_point(aes(x = testSet$x, y = testSet$y),
colour = 'red') +
geom_line(aes(x = trainingSet$x, y = predict(regressor, newdata = trainingSet)),
colour = 'blue') +
ggtitle('X vs Y (Test set)') +
xlab('X') +
ylab('Y')
compare <- cbind(actual=testSet$x, y_pred)
mean(apply(compare, 1, min)/apply(caompare, 1, max))
mean(0.9, 0.9, 0.9, 0.9)
compare <- cbind(actual=testSet$x, y_pred)
mean(apply(compare, 1, min)/apply(compare, 1, max))
mean(0.9, 0.9, 0.9, 0.9)
plot(trainingSet$y, resid(regressor),
ylab="Residuals", xlab="Price",
main="Residual plot")
mean(regressor$residuals)
